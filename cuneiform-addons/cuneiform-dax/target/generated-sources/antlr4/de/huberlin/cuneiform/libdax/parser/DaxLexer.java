// Generated from de/huberlin/cuneiform/libdax/parser/Dax.g4 by ANTLR 4.2
package de.huberlin.cuneiform.libdax.parser;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DaxLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ADAG=1, ARGUMENT=2, CHILD=3, COUNT=4, DVNAME=5, DVVERSION=6, EQ=7, EXECUTABLE=8, 
		FALSE=9, FILE=10, FILENAME=11, ID=12, INDEX=13, INOUT=14, INPUT=15, JOB=16, 
		LARGUMENT=17, LEVEL=18, LINK=19, LTAG=20, NAME=21, OPTIONAL=22, OUTPUT=23, 
		PARENT=24, RARGUMENT=25, REF=26, REGISTER=27, RTAG=28, SCHEMALOCATION=29, 
		SLASH=30, TRANSFER=31, TRUE=32, TYPE=33, USES=34, VERSION=35, XMLNS=36, 
		XSI=37, STRING=38, ARG=39, METAINFO=40, COMMENT=41, WS=42;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'adag'", "'argument'", "'child'", "'count'", "'dv-name'", "'dv-version'", 
		"'='", "'\"executable\"'", "'\"false\"'", "'file'", "'filename'", "'id'", 
		"'index'", "'\"inout\"'", "'\"input\"'", "'job'", "'<argument>'", "'level'", 
		"'link'", "'<'", "'name'", "'optional'", "'\"output\"'", "'parent'", "'</argument>'", 
		"'ref'", "'register'", "'>'", "'xsi:schemaLocation'", "'/'", "'transfer'", 
		"'\"true\"'", "'type'", "'uses'", "'version'", "'xmlns'", "'xmlns:xsi'", 
		"STRING", "ARG", "METAINFO", "COMMENT", "WS"
	};
	public static final String[] ruleNames = {
		"ADAG", "ARGUMENT", "CHILD", "COUNT", "DVNAME", "DVVERSION", "EQ", "EXECUTABLE", 
		"FALSE", "FILE", "FILENAME", "ID", "INDEX", "INOUT", "INPUT", "JOB", "LARGUMENT", 
		"LEVEL", "LINK", "LTAG", "NAME", "OPTIONAL", "OUTPUT", "PARENT", "RARGUMENT", 
		"REF", "REGISTER", "RTAG", "SCHEMALOCATION", "SLASH", "TRANSFER", "TRUE", 
		"TYPE", "USES", "VERSION", "XMLNS", "XSI", "STRING", "ARG", "METAINFO", 
		"COMMENT", "WS"
	};


	public DaxLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Dax.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2,\u018f\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\3"+
		"\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13"+
		"\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3"+
		"\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3"+
		"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3"+
		"\24\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3"+
		"\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3"+
		"\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3"+
		"\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3"+
		"\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3"+
		"\"\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3&\3&\3&\3"+
		"&\3&\3&\3&\3&\3&\3&\3\'\3\'\7\'\u0161\n\'\f\'\16\'\u0164\13\'\3\'\3\'"+
		"\3(\6(\u0169\n(\r(\16(\u016a\3)\3)\3)\3)\7)\u0171\n)\f)\16)\u0174\13)"+
		"\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\7*\u0181\n*\f*\16*\u0184\13*\3*\3*\3"+
		"*\3*\3*\3*\3+\3+\3+\3+\5\u0162\u0172\u0182\2,\3\3\5\4\7\5\t\6\13\7\r\b"+
		"\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26"+
		"+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S"+
		"+U,\3\2\4\7\2/\60\62;C\\^^c|\5\2\13\f\17\17\"\"\u0192\2\3\3\2\2\2\2\5"+
		"\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2"+
		"\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33"+
		"\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2"+
		"\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2"+
		"\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2"+
		"\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K"+
		"\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\3W\3\2"+
		"\2\2\5\\\3\2\2\2\7e\3\2\2\2\tk\3\2\2\2\13q\3\2\2\2\ry\3\2\2\2\17\u0084"+
		"\3\2\2\2\21\u0086\3\2\2\2\23\u0093\3\2\2\2\25\u009b\3\2\2\2\27\u00a0\3"+
		"\2\2\2\31\u00a9\3\2\2\2\33\u00ac\3\2\2\2\35\u00b2\3\2\2\2\37\u00ba\3\2"+
		"\2\2!\u00c2\3\2\2\2#\u00c6\3\2\2\2%\u00d1\3\2\2\2\'\u00d7\3\2\2\2)\u00dc"+
		"\3\2\2\2+\u00de\3\2\2\2-\u00e3\3\2\2\2/\u00ec\3\2\2\2\61\u00f5\3\2\2\2"+
		"\63\u00fc\3\2\2\2\65\u0108\3\2\2\2\67\u010c\3\2\2\29\u0115\3\2\2\2;\u0117"+
		"\3\2\2\2=\u012a\3\2\2\2?\u012c\3\2\2\2A\u0135\3\2\2\2C\u013c\3\2\2\2E"+
		"\u0141\3\2\2\2G\u0146\3\2\2\2I\u014e\3\2\2\2K\u0154\3\2\2\2M\u015e\3\2"+
		"\2\2O\u0168\3\2\2\2Q\u016c\3\2\2\2S\u017a\3\2\2\2U\u018b\3\2\2\2WX\7c"+
		"\2\2XY\7f\2\2YZ\7c\2\2Z[\7i\2\2[\4\3\2\2\2\\]\7c\2\2]^\7t\2\2^_\7i\2\2"+
		"_`\7w\2\2`a\7o\2\2ab\7g\2\2bc\7p\2\2cd\7v\2\2d\6\3\2\2\2ef\7e\2\2fg\7"+
		"j\2\2gh\7k\2\2hi\7n\2\2ij\7f\2\2j\b\3\2\2\2kl\7e\2\2lm\7q\2\2mn\7w\2\2"+
		"no\7p\2\2op\7v\2\2p\n\3\2\2\2qr\7f\2\2rs\7x\2\2st\7/\2\2tu\7p\2\2uv\7"+
		"c\2\2vw\7o\2\2wx\7g\2\2x\f\3\2\2\2yz\7f\2\2z{\7x\2\2{|\7/\2\2|}\7x\2\2"+
		"}~\7g\2\2~\177\7t\2\2\177\u0080\7u\2\2\u0080\u0081\7k\2\2\u0081\u0082"+
		"\7q\2\2\u0082\u0083\7p\2\2\u0083\16\3\2\2\2\u0084\u0085\7?\2\2\u0085\20"+
		"\3\2\2\2\u0086\u0087\7$\2\2\u0087\u0088\7g\2\2\u0088\u0089\7z\2\2\u0089"+
		"\u008a\7g\2\2\u008a\u008b\7e\2\2\u008b\u008c\7w\2\2\u008c\u008d\7v\2\2"+
		"\u008d\u008e\7c\2\2\u008e\u008f\7d\2\2\u008f\u0090\7n\2\2\u0090\u0091"+
		"\7g\2\2\u0091\u0092\7$\2\2\u0092\22\3\2\2\2\u0093\u0094\7$\2\2\u0094\u0095"+
		"\7h\2\2\u0095\u0096\7c\2\2\u0096\u0097\7n\2\2\u0097\u0098\7u\2\2\u0098"+
		"\u0099\7g\2\2\u0099\u009a\7$\2\2\u009a\24\3\2\2\2\u009b\u009c\7h\2\2\u009c"+
		"\u009d\7k\2\2\u009d\u009e\7n\2\2\u009e\u009f\7g\2\2\u009f\26\3\2\2\2\u00a0"+
		"\u00a1\7h\2\2\u00a1\u00a2\7k\2\2\u00a2\u00a3\7n\2\2\u00a3\u00a4\7g\2\2"+
		"\u00a4\u00a5\7p\2\2\u00a5\u00a6\7c\2\2\u00a6\u00a7\7o\2\2\u00a7\u00a8"+
		"\7g\2\2\u00a8\30\3\2\2\2\u00a9\u00aa\7k\2\2\u00aa\u00ab\7f\2\2\u00ab\32"+
		"\3\2\2\2\u00ac\u00ad\7k\2\2\u00ad\u00ae\7p\2\2\u00ae\u00af\7f\2\2\u00af"+
		"\u00b0\7g\2\2\u00b0\u00b1\7z\2\2\u00b1\34\3\2\2\2\u00b2\u00b3\7$\2\2\u00b3"+
		"\u00b4\7k\2\2\u00b4\u00b5\7p\2\2\u00b5\u00b6\7q\2\2\u00b6\u00b7\7w\2\2"+
		"\u00b7\u00b8\7v\2\2\u00b8\u00b9\7$\2\2\u00b9\36\3\2\2\2\u00ba\u00bb\7"+
		"$\2\2\u00bb\u00bc\7k\2\2\u00bc\u00bd\7p\2\2\u00bd\u00be\7r\2\2\u00be\u00bf"+
		"\7w\2\2\u00bf\u00c0\7v\2\2\u00c0\u00c1\7$\2\2\u00c1 \3\2\2\2\u00c2\u00c3"+
		"\7l\2\2\u00c3\u00c4\7q\2\2\u00c4\u00c5\7d\2\2\u00c5\"\3\2\2\2\u00c6\u00c7"+
		"\7>\2\2\u00c7\u00c8\7c\2\2\u00c8\u00c9\7t\2\2\u00c9\u00ca\7i\2\2\u00ca"+
		"\u00cb\7w\2\2\u00cb\u00cc\7o\2\2\u00cc\u00cd\7g\2\2\u00cd\u00ce\7p\2\2"+
		"\u00ce\u00cf\7v\2\2\u00cf\u00d0\7@\2\2\u00d0$\3\2\2\2\u00d1\u00d2\7n\2"+
		"\2\u00d2\u00d3\7g\2\2\u00d3\u00d4\7x\2\2\u00d4\u00d5\7g\2\2\u00d5\u00d6"+
		"\7n\2\2\u00d6&\3\2\2\2\u00d7\u00d8\7n\2\2\u00d8\u00d9\7k\2\2\u00d9\u00da"+
		"\7p\2\2\u00da\u00db\7m\2\2\u00db(\3\2\2\2\u00dc\u00dd\7>\2\2\u00dd*\3"+
		"\2\2\2\u00de\u00df\7p\2\2\u00df\u00e0\7c\2\2\u00e0\u00e1\7o\2\2\u00e1"+
		"\u00e2\7g\2\2\u00e2,\3\2\2\2\u00e3\u00e4\7q\2\2\u00e4\u00e5\7r\2\2\u00e5"+
		"\u00e6\7v\2\2\u00e6\u00e7\7k\2\2\u00e7\u00e8\7q\2\2\u00e8\u00e9\7p\2\2"+
		"\u00e9\u00ea\7c\2\2\u00ea\u00eb\7n\2\2\u00eb.\3\2\2\2\u00ec\u00ed\7$\2"+
		"\2\u00ed\u00ee\7q\2\2\u00ee\u00ef\7w\2\2\u00ef\u00f0\7v\2\2\u00f0\u00f1"+
		"\7r\2\2\u00f1\u00f2\7w\2\2\u00f2\u00f3\7v\2\2\u00f3\u00f4\7$\2\2\u00f4"+
		"\60\3\2\2\2\u00f5\u00f6\7r\2\2\u00f6\u00f7\7c\2\2\u00f7\u00f8\7t\2\2\u00f8"+
		"\u00f9\7g\2\2\u00f9\u00fa\7p\2\2\u00fa\u00fb\7v\2\2\u00fb\62\3\2\2\2\u00fc"+
		"\u00fd\7>\2\2\u00fd\u00fe\7\61\2\2\u00fe\u00ff\7c\2\2\u00ff\u0100\7t\2"+
		"\2\u0100\u0101\7i\2\2\u0101\u0102\7w\2\2\u0102\u0103\7o\2\2\u0103\u0104"+
		"\7g\2\2\u0104\u0105\7p\2\2\u0105\u0106\7v\2\2\u0106\u0107\7@\2\2\u0107"+
		"\64\3\2\2\2\u0108\u0109\7t\2\2\u0109\u010a\7g\2\2\u010a\u010b\7h\2\2\u010b"+
		"\66\3\2\2\2\u010c\u010d\7t\2\2\u010d\u010e\7g\2\2\u010e\u010f\7i\2\2\u010f"+
		"\u0110\7k\2\2\u0110\u0111\7u\2\2\u0111\u0112\7v\2\2\u0112\u0113\7g\2\2"+
		"\u0113\u0114\7t\2\2\u01148\3\2\2\2\u0115\u0116\7@\2\2\u0116:\3\2\2\2\u0117"+
		"\u0118\7z\2\2\u0118\u0119\7u\2\2\u0119\u011a\7k\2\2\u011a\u011b\7<\2\2"+
		"\u011b\u011c\7u\2\2\u011c\u011d\7e\2\2\u011d\u011e\7j\2\2\u011e\u011f"+
		"\7g\2\2\u011f\u0120\7o\2\2\u0120\u0121\7c\2\2\u0121\u0122\7N\2\2\u0122"+
		"\u0123\7q\2\2\u0123\u0124\7e\2\2\u0124\u0125\7c\2\2\u0125\u0126\7v\2\2"+
		"\u0126\u0127\7k\2\2\u0127\u0128\7q\2\2\u0128\u0129\7p\2\2\u0129<\3\2\2"+
		"\2\u012a\u012b\7\61\2\2\u012b>\3\2\2\2\u012c\u012d\7v\2\2\u012d\u012e"+
		"\7t\2\2\u012e\u012f\7c\2\2\u012f\u0130\7p\2\2\u0130\u0131\7u\2\2\u0131"+
		"\u0132\7h\2\2\u0132\u0133\7g\2\2\u0133\u0134\7t\2\2\u0134@\3\2\2\2\u0135"+
		"\u0136\7$\2\2\u0136\u0137\7v\2\2\u0137\u0138\7t\2\2\u0138\u0139\7w\2\2"+
		"\u0139\u013a\7g\2\2\u013a\u013b\7$\2\2\u013bB\3\2\2\2\u013c\u013d\7v\2"+
		"\2\u013d\u013e\7{\2\2\u013e\u013f\7r\2\2\u013f\u0140\7g\2\2\u0140D\3\2"+
		"\2\2\u0141\u0142\7w\2\2\u0142\u0143\7u\2\2\u0143\u0144\7g\2\2\u0144\u0145"+
		"\7u\2\2\u0145F\3\2\2\2\u0146\u0147\7x\2\2\u0147\u0148\7g\2\2\u0148\u0149"+
		"\7t\2\2\u0149\u014a\7u\2\2\u014a\u014b\7k\2\2\u014b\u014c\7q\2\2\u014c"+
		"\u014d\7p\2\2\u014dH\3\2\2\2\u014e\u014f\7z\2\2\u014f\u0150\7o\2\2\u0150"+
		"\u0151\7n\2\2\u0151\u0152\7p\2\2\u0152\u0153\7u\2\2\u0153J\3\2\2\2\u0154"+
		"\u0155\7z\2\2\u0155\u0156\7o\2\2\u0156\u0157\7n\2\2\u0157\u0158\7p\2\2"+
		"\u0158\u0159\7u\2\2\u0159\u015a\7<\2\2\u015a\u015b\7z\2\2\u015b\u015c"+
		"\7u\2\2\u015c\u015d\7k\2\2\u015dL\3\2\2\2\u015e\u0162\7$\2\2\u015f\u0161"+
		"\13\2\2\2\u0160\u015f\3\2\2\2\u0161\u0164\3\2\2\2\u0162\u0163\3\2\2\2"+
		"\u0162\u0160\3\2\2\2\u0163\u0165\3\2\2\2\u0164\u0162\3\2\2\2\u0165\u0166"+
		"\7$\2\2\u0166N\3\2\2\2\u0167\u0169\t\2\2\2\u0168\u0167\3\2\2\2\u0169\u016a"+
		"\3\2\2\2\u016a\u0168\3\2\2\2\u016a\u016b\3\2\2\2\u016bP\3\2\2\2\u016c"+
		"\u016d\7>\2\2\u016d\u016e\7A\2\2\u016e\u0172\3\2\2\2\u016f\u0171\13\2"+
		"\2\2\u0170\u016f\3\2\2\2\u0171\u0174\3\2\2\2\u0172\u0173\3\2\2\2\u0172"+
		"\u0170\3\2\2\2\u0173\u0175\3\2\2\2\u0174\u0172\3\2\2\2\u0175\u0176\7A"+
		"\2\2\u0176\u0177\7@\2\2\u0177\u0178\3\2\2\2\u0178\u0179\b)\2\2\u0179R"+
		"\3\2\2\2\u017a\u017b\7>\2\2\u017b\u017c\7#\2\2\u017c\u017d\7/\2\2\u017d"+
		"\u017e\7/\2\2\u017e\u0182\3\2\2\2\u017f\u0181\13\2\2\2\u0180\u017f\3\2"+
		"\2\2\u0181\u0184\3\2\2\2\u0182\u0183\3\2\2\2\u0182\u0180\3\2\2\2\u0183"+
		"\u0185\3\2\2\2\u0184\u0182\3\2\2\2\u0185\u0186\7/\2\2\u0186\u0187\7/\2"+
		"\2\u0187\u0188\7@\2\2\u0188\u0189\3\2\2\2\u0189\u018a\b*\2\2\u018aT\3"+
		"\2\2\2\u018b\u018c\t\3\2\2\u018c\u018d\3\2\2\2\u018d\u018e\b+\2\2\u018e"+
		"V\3\2\2\2\7\2\u0162\u016a\u0172\u0182\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}